const {compile} = require('./jspackage')
const fs = require('fs')
const path = require('path')
const optparse = require('optparse')

const switches =
  * '-h' '--help'     "shows this help section and exit"
  * '-v' '--version'  "print the version number and exit"
  * '-b' '--bare'     "compile without a top-level function wrapper"
  * '-w' '--watch'    "watch source files and recompile when any change"
  * '-l' '--lib PATH' "add an additional search directory for source files"

const parser = new optparse.OptionParser(switches)

printUsage = !->
  parser.banner = "Usage: jspackage input_file output_file [options]"
  console.log(parser.toString())

parser.on \help, !->
  printUsage!
  process.exit(1)

parser.on \version, !->
  lib_dir = path.dirname(fs.realpathSync(__filename))
  pkg_path = path.resolve(lib_dir, "..", "package.json")
  data = fs.readFileSync(pkg_path, 'utf8')
  pkg = JSON.parse(data)
  console.log(pkg.version)
  process.exit(1)

mainfile = null
parser.on 0, !-> mainfile := it

output = null
parser.on 1, !-> output := it

options = {}
parser.on \bare, !-> options.bare = true
parser.on \watch, !-> options.watch = true

parser.on \lib, !(name, value) ->
  options.@@libs.push value

parser.parse(process.argv.splice(2))

if not mainfile or not output
  printUsage!
  process.exit(1)

# allow the user to specify the first song without an extension
if (ext = path.extname(mainfile)).length > 0
  mainfile .= substring(0, mainfile.length - ext.length)

options <<< {mainfile}
compile options, !(err, code) ->
  if options.watch
    const timestamp = (new Date()).toLocaleTimeString()
    if err
      console.error("#timestamp - error: #err")
    else
      console.info("#timestamp - generated #output")
      fs.writeFile(output, code)
  else
    if err then throw err
    fs.writeFile(output, code)
